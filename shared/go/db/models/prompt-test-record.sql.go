// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: prompt-test-record.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPromptTestRecord = `-- name: CreatePromptTestRecord :one

INSERT INTO prompt_test_record (
    variable_values,
    response,
    prompt_request_record_id
)
VALUES ($1, $2, $3)
RETURNING id, variable_values, response, created_at, prompt_request_record_id
`

type CreatePromptTestRecordParams struct {
	Response              string      `json:"response"`
	VariableValues        []byte      `json:"variableValues"`
	PromptRequestRecordID pgtype.UUID `json:"promptRequestRecordId"`
}

// -- prompt test record
func (q *Queries) CreatePromptTestRecord(ctx context.Context, arg CreatePromptTestRecordParams) (PromptTestRecord, error) {
	row := q.db.QueryRow(ctx, createPromptTestRecord, arg.VariableValues, arg.Response, arg.PromptRequestRecordID)
	var i PromptTestRecord
	err := row.Scan(
		&i.ID,
		&i.VariableValues,
		&i.Response,
		&i.CreatedAt,
		&i.PromptRequestRecordID,
	)
	return i, err
}

const deletePromptTestRecord = `-- name: DeletePromptTestRecord :exec
DELETE FROM prompt_test_record WHERE id = $1
`

func (q *Queries) DeletePromptTestRecord(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePromptTestRecord, id)
	return err
}

const retrievePromptTestRecord = `-- name: RetrievePromptTestRecord :one
SELECT
    ptr.id,
    ptr.variable_values,
    ptr.response,
    ptr.created_at,
    prr.error_log,
    prr.start_time,
    prr.finish_time,
    prr.duration_ms,
    prr.request_tokens_cost,
    prr.response_tokens_cost,
    prr.request_tokens,
    prr.response_tokens,
    pc.provider_prompt_messages,
    pc.model_parameters,
    pc.model_type,
    pc.model_vendor,
    pc.is_test_config,
    pc.id AS prompt_config_id
FROM prompt_test_record AS ptr
LEFT JOIN prompt_request_record AS prr ON ptr.prompt_request_record_id = prr.id
LEFT JOIN prompt_config AS pc ON prr.prompt_config_id = pc.id
WHERE ptr.id = $1
`

type RetrievePromptTestRecordRow struct {
	FinishTime             pgtype.Timestamptz `json:"finishTime"`
	CreatedAt              pgtype.Timestamptz `json:"createdAt"`
	StartTime              pgtype.Timestamptz `json:"startTime"`
	ResponseTokensCost     pgtype.Numeric     `json:"responseTokensCost"`
	Response               string             `json:"response"`
	RequestTokensCost      pgtype.Numeric     `json:"requestTokensCost"`
	ErrorLog               pgtype.Text        `json:"errorLog"`
	VariableValues         []byte             `json:"variableValues"`
	ProviderPromptMessages []byte             `json:"providerPromptMessages"`
	ModelParameters        []byte             `json:"modelParameters"`
	ModelType              NullModelType      `json:"modelType"`
	ModelVendor            NullModelVendor    `json:"modelVendor"`
	DurationMs             pgtype.Int4        `json:"durationMs"`
	RequestTokens          pgtype.Int4        `json:"requestTokens"`
	ResponseTokens         pgtype.Int4        `json:"responseTokens"`
	ID                     pgtype.UUID        `json:"id"`
	PromptConfigID         pgtype.UUID        `json:"promptConfigId"`
	IsTestConfig           pgtype.Bool        `json:"isTestConfig"`
}

func (q *Queries) RetrievePromptTestRecord(ctx context.Context, id pgtype.UUID) (RetrievePromptTestRecordRow, error) {
	row := q.db.QueryRow(ctx, retrievePromptTestRecord, id)
	var i RetrievePromptTestRecordRow
	err := row.Scan(
		&i.ID,
		&i.VariableValues,
		&i.Response,
		&i.CreatedAt,
		&i.ErrorLog,
		&i.StartTime,
		&i.FinishTime,
		&i.DurationMs,
		&i.RequestTokensCost,
		&i.ResponseTokensCost,
		&i.RequestTokens,
		&i.ResponseTokens,
		&i.ProviderPromptMessages,
		&i.ModelParameters,
		&i.ModelType,
		&i.ModelVendor,
		&i.IsTestConfig,
		&i.PromptConfigID,
	)
	return i, err
}

const retrievePromptTestRecords = `-- name: RetrievePromptTestRecords :many
SELECT
    ptr.id,
    ptr.variable_values,
    ptr.response,
    ptr.created_at,
    prr.error_log,
    prr.start_time,
    prr.finish_time,
    prr.duration_ms,
    prr.request_tokens_cost,
    prr.response_tokens_cost,
    prr.request_tokens,
    prr.response_tokens,
    pc.provider_prompt_messages,
    pc.model_parameters,
    pc.model_type,
    pc.model_vendor,
    pc.is_test_config,
    pc.id AS prompt_config_id
FROM prompt_test_record AS ptr
LEFT JOIN prompt_request_record AS prr ON ptr.prompt_request_record_id = prr.id
LEFT JOIN prompt_config AS pc ON prr.prompt_config_id = pc.id
LEFT JOIN application AS a ON pc.application_id = a.id
WHERE a.id = $1
`

type RetrievePromptTestRecordsRow struct {
	FinishTime             pgtype.Timestamptz `json:"finishTime"`
	CreatedAt              pgtype.Timestamptz `json:"createdAt"`
	StartTime              pgtype.Timestamptz `json:"startTime"`
	ResponseTokensCost     pgtype.Numeric     `json:"responseTokensCost"`
	Response               string             `json:"response"`
	RequestTokensCost      pgtype.Numeric     `json:"requestTokensCost"`
	ErrorLog               pgtype.Text        `json:"errorLog"`
	VariableValues         []byte             `json:"variableValues"`
	ProviderPromptMessages []byte             `json:"providerPromptMessages"`
	ModelParameters        []byte             `json:"modelParameters"`
	ModelType              NullModelType      `json:"modelType"`
	ModelVendor            NullModelVendor    `json:"modelVendor"`
	DurationMs             pgtype.Int4        `json:"durationMs"`
	RequestTokens          pgtype.Int4        `json:"requestTokens"`
	ResponseTokens         pgtype.Int4        `json:"responseTokens"`
	ID                     pgtype.UUID        `json:"id"`
	PromptConfigID         pgtype.UUID        `json:"promptConfigId"`
	IsTestConfig           pgtype.Bool        `json:"isTestConfig"`
}

func (q *Queries) RetrievePromptTestRecords(ctx context.Context, id pgtype.UUID) ([]RetrievePromptTestRecordsRow, error) {
	rows, err := q.db.Query(ctx, retrievePromptTestRecords, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrievePromptTestRecordsRow
	for rows.Next() {
		var i RetrievePromptTestRecordsRow
		if err := rows.Scan(
			&i.ID,
			&i.VariableValues,
			&i.Response,
			&i.CreatedAt,
			&i.ErrorLog,
			&i.StartTime,
			&i.FinishTime,
			&i.DurationMs,
			&i.RequestTokensCost,
			&i.ResponseTokensCost,
			&i.RequestTokens,
			&i.ResponseTokens,
			&i.ProviderPromptMessages,
			&i.ModelParameters,
			&i.ModelType,
			&i.ModelVendor,
			&i.IsTestConfig,
			&i.PromptConfigID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
